moon = open('../Data/speech_moon.txt', encoding='UTF-8').read()

# 문자열 데이타 수집
# 명사만 추출
# DataFrame으로 만들기

#한글을 제외하고 모든 문자열을 공백으로 변환합니다.
import re
moon = re.sub('[^가-힣]', ' ', moon)

#분석에서 제외시키고자 하는 단어(불용어, stopword)를 배열에 담아요
stop_word = ['나라','국민','우리','대통령','대한민국','정치','우리나라','정부'];
for w in stop_word:
    moon = re.sub(w, ' ', moon)

#동의어에 대한 처리
#의미상 비슷한 단어가 있다면 하나로 만들어 줍니다.
moon = re.sub('복지국가','복지',moon)

# print(moon)
# print(type(moon))

#한글 형태소 분석을 위한 konlpy를 설치하고 포함시킵니다.
#konlpy는 jdk를 필요로 합니다.
#jdk를 설치하고 환경변수에 JAVA_HOME에 jdk경로를 설정
#path:%JAVA_HOME%bin
#환경변수를 설정하고 파이참을 다시 시작해야 적용됩니다.
import konlpy

#문장속에 있는 명사만 추출하기 위하여
#konlpy의 Hannanum을 생성합니다.
hannanum = konlpy.tag.Hannanum()

#hannanum객체의 nouns함수를 이용하면 문장속에 "명사"만 추출할 수 있어요
#매개변수로 str, 반환하는 것도 str입니다.
# data = hannanum.nouns("대한민국의 영토는 한반도와 그 부속도서로 한다.")
# print(data)

# ['대한민국', '영토', '한반도', '부속도서']

#대동령 연설문이 있는 moon변에서 명사만 추출해 봅니다.

# print(moon)
# print(type(moon))
moon = hannanum.nouns(moon)
print(moon)
print(type(moon))
# <class 'list'>

#우리는 단어별 빈도수를 구하려고 합니다.
#그래서 list로 되어 있는 moon을 DataFrame으로 만들어요
import pandas as pd
df_word = pd.DataFrame({'word':moon})
print(df_word)

#단어의 글자 수가 2글자 이상인것만 분석의 대상으로 하기 위하여 
#단어글자수를 위한 변수 count를 만들어요
#데이터프레임의 속성의 문자열의 길이
#df['속성명'].str.len()
df_word['count'] = df_word['word'].str.len()
print(df_word)
print(df_word.shape)        #(1413, 2)

#글자길이가 2글자 이상인것만 추출 해 봅니다.
#조건에 맞는 행을 추출
#   1. query
#   2. bool array
# df_word = df_word.query('count >= 2')
df_word = df_word[df_word['count'] >= 2]
print(df_word.shape)        #(1187, 2)

print(df_word)

# 데이터프레임에서 특정 컬럼의 값의 순서대로 정렬
# sort_values
# df.sort_values('속성명')
#문자열의 길이 순으로 정렬
print(df_word.sort_values('count'))     #   <--- 데이터 프레임 자체를 count기준으로 정렬
print(df_word['count'].sort_values())   #   <--- 데이터 프레임에서 count만 추출하여 정렬


print("-"*50)
#단어별 빈도수 확인
print(df_word['word'].value_counts())
# Length: 710

#단어별 빈도수(n)를 구하여  내림차순 정렬하여 새로운 데이터 프레임을 만들어요
df_word = df_word.groupby('word', as_index=False)\
    .agg(n=("word","count"))\
    .sort_values("n",ascending=False)
# print(df_word)
# [710 rows x 2 columns]

#빈도수가 가장 높은 상위 20개의 단어를 출력 해 봅니다
print(df_word.head(20))

#나타난 결과에서
#분석에 맞지 않은 불용어 파악하고
#위에 re.sub부터 다시 진행합니다.
#대통령 연설문에서 당연히 빈번히 나타는 다음의 단어들은 삭제하기로 합니다.
'''     word   n
153    나라  19
116    국민  18
422    우리  17
198   대통령  12
202  대한민국  11
525    정치  10	
423  우리나라  10
517    정부   7
103    교육   6
339    세상   6'''

import matplotlib.pyplot as plt

plt.rcParams['font.family'] ='Malgun Gothic'
plt.rcParams['axes.unicode_minus'] =False

#빈도수가 높은 상위 20개의 단어를 뽑아 저장합니다.
top20 = df_word.head(20)

#이것을 가로막대로 출력합니다.
#word를 x축으로 두면 글자가 겹쳐서 나오니 word를 y축, 빈도수 n을 x축으로 합니다.
import seaborn as sns

sns.barplot(data=top20, x='n', y='word')
# plt.show()

#복지, 복지국가
#이것은 하나의 글자로 만드는 것이 좋겠습니다.      (동의어에 대한처리도 필요합니다.)
#

# 단어별 빈도수가 높은순서대로 글자를 크게 출력 해주는 그래프인 워드클라우드를 만들어 봅시다.

#워드클라우드에서 사용할 글꼴파일의 경로를 설정합니다.
font = "../Data/DoHyeon-Regular.ttf"

#워드클라우드를 만드는 함수는 단어별 빈도수가 있는 딕셔너리를 매개변수로 주어야 합니다.
#위에서 만든 데이터프레임을 딕셔너리로 변환합니다.
#단어(word)를 key로 하고 빈도수(n)을 value로 하는 딕셔너리로 변환해요.
dic_word = df_word.set_index('word').to_dict()['n']
print(dic_word)
# {'일자리': 19, '복지': 16, '확대': 11, '성장': 9, '사회': 9, '사람': 9, '평화': 8, '산업': 7, '추진': 7, '교육': 6, '경쟁': 6, '세상': 6, '보통사람들': 5, '경제': 5, '공평': 5, '상생': 5, '정규직': 5, '전환': 4, '고통': 4, '결과': 4, '중소기업': 4, '주인': 4, '정의': 4, '사회적': 4, '모델': 4, '요구': 4, '여성': 4, '약자': 4, '아이들': 4, '아래': 4, '희망': 4, '창출': 4, '역사': 4, '기회': 4, '담쟁': 4, '때문': 4, '투자': 4, '강화': 4, '군대': 3, '원전': 3, '원칙': 3, '노인': 3, '권력': 3, '여러분': 3, '개선': 3, '이명박': 3, '채택': 3, '사람들': 3, '가치': 3, '공정': 3, '에너지': 3, '비중': 3, '양극화': 3, '과도한': 3, '활용': 3, '관계': 3, '신산업': 3, '성장전략': 3, '세계': 3, '시민': 3, '교육혁신': 3, '세금': 3, '국가': 3, '구조': 3, '그것': 3, '가지': 3, '강자': 3, '질서': 3, '혁신': 3, '변화': 3, '지방': 3, '경제성장': 3, '지원': 3, '부담': 3, '소수': 3, '문재인': 3, '행복': 3, '참여': 3, '혁명': 3, '특권': 3, '바탕': 2, '대기업': 2, '대책': 2, '만큼': 2, '모두': 2, '성장동력': 2, '대부분': 2, '반영': 2, '보육': 2, '대접': 2, '담대': 2, '마음속': 2, '불안': 2, '분열': 2, '분배': 2, '북한': 2, '사회서비스': 2, '부문': 2, '부당': 2, '마련': 2, '따뜻한': 2, '복원': 2, '동안': 2, '새누리당': 2, '서민들': 2, '선순환': 2, '마음': 2, '선언': 2, '도종환': 2, '수준': 2, '수명': 2, '승자독식': 2, '존경': 2, '중국': 2, '중산층': 2, '중심': 2, '지금': 2, '진정한': 2, '차별': 2, '참가율': 2, '촉진': 2, '추구': 2, '토대': 2, '특권층': 2, '평생학습체제': 2, '평화체제': 2, '포용적': 2, '필요': 2, '학교': 2, '학습': 2, '한반': 2, '한반도': 2, '한번': 2, '해결': 2, '향상': 2, '협력': 2, '환경': 2, '제안': 2, '정책': 2, '정권': 2, '육성': 2, '시대': 2, '시장만능주의': 2, '신뢰': 2, '실현': 2, '아이': 2, '여성들': 2, '역동적': 2, '노동자들': 2, '오늘': 2, '원리': 2, '위로': 2, '의료': 2, '젊은이들': 2, '의지': 2, '이상': 2, '일대': 2, '일부': 2, '자리': 2, '자영업': 2, '자회담': 2, '재개': 2, '재벌': 2, '재생': 2, '적극적': 2, '노력': 2, '희생': 2, '강자지배': 2, '거대': 2, '공유': 2, '남녀': 2, '기존': 2, '남북': 2, '겸손': 2, '강력': 2, '결심': 2, '극복': 2, '근본적': 2, '금강산': 2, '균형': 2, '근간': 2, '남쪽': 2, '국가비전': 2, '경제민주화': 2, '나뭇가지': 2, '기반': 2, '가슴': 2, '공동번영': 2, '기업': 2, '과실': 2, '종사': 1, '주요': 1, '주변국들': 1, '정보통신': 1, '주도적': 1, '주거불안': 1, '경제활동': 1, '주거복지': 1, '정의로운': 1, '제조': 1, '정조대왕': 1, '조세정의': 1, '종류': 1, '존재해': 1, '경제지': 1, '정책과정': 1, '존립': 1, '정책수단': 1, '제공': 1, '조의': 1, '경제위': 1, '종말': 1, '노동시장': 1, '경제력': 1, '경쟁력': 1, '건곤': 1, '진출': 1, '건설': 1, '진정성': 1, '진심어린': 1, '진보세력만': 1, '진보': 1, '진단': 1, '직속': 1, '겨를': 1, '지역우대': 1, '지역사회': 1, '지역균형발전': 1, '지역경제': 1, '지속가능성': 1, '지속가능': 1, '지배구조': 1, '지배': 1, '지방채용': 1, '지방대학': 1, '결연': 1, '지구상': 1, '중지': 1, '중요': 1, '경감': 1, '중상모략': 1, '경영': 1, '정당한': 1, '중단': 1, '정도': 1, '고개': 1, '경험': 1, '잠자리': 1, '자체': 1, '자율성': 1, '자원': 1, '자영업자들': 1, '고용불안': 1, '자신': 1, '자식': 1, '자본주': 1, '자본': 1, '고용영향평가제도': 1, '자녀들': 1, '입장': 1, '입시부담': 1, '입시': 1, '일할': 1, '일자리점검': 1, '고용증진': 1, '고조': 1, '일본': 1, '곤란': 1, '인터넷': 1, '인정': 1, '인식': 1, '인력': 1, '인도': 1, '인간답': 1, '인간': 1, '이행': 1, '이익': 1, '고용': 1, '잠재력': 1, '정권교체': 1, '잠재적': 1, '계층': 1, '점검': 1, '집단협업': 1, '절실': 1, '절박한': 1, '절박': 1, '고단': 1, '전진': 1, '전쟁': 1, '전장': 1, '전세계': 1, '전반': 1, '전기자동차': 1, '적용': 1, '고등학교': 1, '적극': 1, '저하': 1, '저것': 1, '재편': 1, '재촉': 1, '재정지출': 1, '재생에너지': 1, '고령자들': 1, '재분배': 1, '재벌집단': 1, '고민': 1, '고사': 1, '장기요양보험': 1, '잣대': 1, '집단': 1, '창고': 1, '집안': 1, '학부모': 1, '행세': 1, '해소': 1, '해방': 1, '강점': 1, '한편': 1, '한숨': 1, '강조': 1, '한반도평화': 1, '개념': 1, '개발독재': 1, '개발사업': 1, '학생들': 1, '학생': 1, '학교폭력': 1, '헌법상': 1, '개방': 1, '하늘': 1, '하나': 1, '개방형': 1, '풍요': 1, '표정': 1, '포퓰리즘': 1, '개성공단': 1, '포기': 1, '개천': 1, '평화적': 1, '평화로운': 1, '평화경제': 1, '강요': 1, '헌신': 1, '평창': 1, '확산': 1, '흡수': 1, '휴전선': 1, '훗날': 1, '후분배': 1, '효도': 1, '효과': 1, '획기적': 1, '회의': 1, '황금': 1, '가족': 1, '활성화': 1, '가족구조': 1, '확장': 1, '확립': 1, '강력한': 1, '각종': 1, '확고': 1, '호혜협력': 1, '형성': 1, '협상': 1, '협력적': 1, '감당': 1, '협동조합': 1, '협동생태계': 1, '협동': 1, '현장': 1, '현실': 1, '혁신도시': 1, '개최': 1, '개혁': 1, '집중': 1, '철저': 1, '거부': 1, '거시구조적': 1, '최저임금': 1, '최저': 1, '최우선': 1, '최상위': 1, '거점': 1, '초라': 1, '초등단계': 1, '청산해': 1, '청산': 1, '첫째': 1, '철학': 1, '천지': 1, '출마선언': 1, '척결': 1, '거창': 1, '채용': 1, '걱정거리': 1, '창조적': 1, '창조성': 1, '창의성': 1, '이외': 1, '건강': 1, '건강불안': 1, '차원': 1, '차별철폐': 1, '건강지원': 1, '출마': 1, '출마선언문': 1, '평생학습': 1, '특기적성': 1, '평생': 1, '평범': 1, '평등': 1, '평가': 1, '편가르지': 1, '패자부활': 1, '패자': 1, '패배주의': 1, '파탄': 1, '파동': 1, '파괴': 1, '튼튼': 1, '특별': 1, '거기': 1, '출발': 1, '거대기업': 1, '거리': 1, '토건세력': 1, '토건사업': 1, '탁월': 1, '콘텐츠산업': 1, '침해': 1, '측근세력들': 1, '취업불안': 1, '취업': 1, '취약': 1, '출산율': 1, '출발선': 1, '이유': 1, '공기업': 1, '곳곳': 1, '보완관계': 1, '근로시간': 1, '부처': 1, '부자감세': 1, '부자': 1, '부유층': 1, '부모들': 1, '급격': 1, '복지투자': 1, '급급한': 1, '기득권': 1, '보편적': 1, '보장하': 1, '기본방향': 1, '보수': 1, '분단': 1, '보상': 1, '보고': 1, '병행': 1, '병역': 1, '기술': 1, '방해': 1, '방안': 1, '방식': 1, '방법': 1, '발전': 1, '발걸음': 1, '반칙': 1, '기술혁신': 1, '북핵문제': 1, '근로능력': 1, '민주화': 1, '그들': 1, '군림': 1, '살벌한': 1, '산업혁신': 1, '산업혁명': 1, '군사대결지대': 1, '권익': 1, '사회안전망': 1, '권한': 1, '균등': 1, '사유화': 1, '사업': 1, '사상': 1, '사병': 1, '사교육': 1, '분야': 1, '빈부격차': 1, '비전': 1, '비례': 1, '붕괴': 1, '불평등': 1, '극심한': 1, '불비불명': 1, '불로소득': 1, '불균형': 1, '불구': 1, '불공평': 1, '불가능': 1, '분쟁': 1, '바이오산업': 1, '민주적': 1, '상식적': 1, '낭비': 1, '대화': 1, '대표': 1, '남북정상선언': 1, '남북한': 1, '대외정책': 1, '대외의존형': 1, '대선출마': 1, '대비': 1, '남북협력': 1, '대대적': 1, '대결': 1, '당당': 1, '담쟁이': 1, '담보': 1, '도입': 1, '내용': 1, '다수': 1, '눈물': 1, '누구': 1, '농림': 1, '녹색': 1, '노후불안': 1, '노후대비': 1, '노인들': 1, '냉소거리': 1, '노사': 1, '노무현': 1, '네트워크': 1, '덕분': 1, '남북관계': 1, '민주영령': 1, '목소리': 1, '민주': 1, '미안': 1, '미래': 1, '미국과': 1, '미국': 1, '문화혁신': 1, '문화산업': 1, '문제들': 1, '기업지원': 1, '무엇': 1, '무분별한': 1, '무궁무진한': 1, '목표': 1, '모습': 1, '독려': 1, '기초노령연금': 1, '김대중': 1, '막중': 1, '나노': 1, '마을': 1, '낙수효과': 1, '러시아': 1, '뚜벅뚜벅': 1, '낙후': 1, '뒷받침': 1, '둘째': 1, '동행': 1, '동북아시아': 1, '상식': 1, '상처': 1, '이불': 1, '어려움': 1, '역할': 1, '공적서비스': 1, '공정거래질서': 1, '공정사회': 1, '공정한': 1, '에너지기술': 1, '공존': 1, '엄중하기': 1, '엄격': 1, '언덕': 1, '억제': 1, '억울': 1, '어르신들': 1, '어디': 1, '연계': 1, '어깨': 1, '양측': 1, '과거': 1, '약화': 1, '과도': 1, '약속드': 1, '애국': 1, '암울한': 1, '안심': 1, '안보환경': 1, '안보': 1, '안가': 1, '악순환': 1, '연결': 1, '연동제': 1, '과잉': 1, '위정자': 1, '공공성': 1, '이득': 1, '이념': 1, '공공임대주택': 1, '의무': 1, '넷째': 1, '의견': 1, '육아': 1, '유효수요': 1, '유아': 1, '유산': 1, '유럽': 1, '유능': 1, '공동선언': 1, '연륜': 1, '월세': 1, '공동운명체': 1, '공동이익': 1, '공무원': 1, '운명': 1, '우위': 1, '용인': 1, '요양': 1, '공부': 1, '외면': 1, '공생': 1, '영혼들': 1, '영역': 1, '과오': 1, '실효성': 1, '상황': 1, '설치': 1, '소박한': 1, '소득재분배': 1, '소득': 1, '셋째': 1, '세종시': 1, '구축작업': 1, '국가권력': 1, '국가발전': 1, '성적스트레스': 1, '성장잠재력': 1, '국가일자리위원회': 1, '국경': 1, '성과': 1, '설악산': 1, '소비생활': 1, '선진국': 1, '국방력': 1, '국제관광특구': 1, '선성장': 1, '선거': 1, '석유시대': 1, '국토': 1, '서민경제': 1, '서로': 1, '생활임금': 1, '생태적': 1, '생각': 1, '국토방위': 1, '소비': 1, '구축': 1, '과잉인력': 1, '시대착오적': 1, '실질적': 1, '실종': 1, '실업자': 1, '실력': 1, '관광': 1, '관대': 1, '신규고용': 1, '관심': 1, '시장독재': 1, '시장경제': 1, '시인': 1, '시민들': 1, '교사': 1, '시대교체': 1, '소외': 1, '교체': 1, '승진기회': 1, '구매력': 1, '승복해': 1, '순국선열': 1, '숙제': 1, '수천': 1, '가사': 1, '구조도': 1, '수립': 1, '손해': 1, '소통': 1, '소중': 1, '가동': 1}

# 워드클라우드 설치 오류시에 다음에서 build tool을 다운받아 설치합니다.
# 설치시에 c++을 사용한 데스크탑 개발"을 선택합니다.
# https://visualstudio.microsoft.com/ko/visual-cpp-build-tools/

#드랍박스에 있는 파일(wordcloud-1.8.1-cp311-cp311-win_amd64.whl)을 내려받아
#직접설치합니다.

#pip install wordcloud
from wordcloud import WordCloud

#워드클라우드 객체 만들기
# wc = WordCloud(
#     random_state=1234,
#     font_path=font,
#     width=400,
#     height=400,
#     background_color='white'
# )

#워드클라우드 단어별 빈도수 데이터를 설정
# img_wordcloud = wc.generate_from_frequencies(dic_word)
#
# #워드클라우드 출력하기
# plt.figure(figsize=(10,10))
# plt.axis('off')
# plt.imshow(img_wordcloud)
# plt.show()


# Original error was: No module named 'numpy.core._multiarray_umath'
# 파이썬 버전에 따라 문제가 생길 수 있어요!
# 버전에 맞는 wordcloud-1.8.1-cp310-cp310-win_amd64.whl을 다운받아
# 다시 설치 해 봅니다.
# pip install ~~~ 
# Python 3.11.1     <----  파이썬 버전 확인 후 맞는 파일 다운로드
# Python 3.10.1
# 버전에 맞는 파일을 설치하였으나 동일한 오류 메세지

#mask를 이용하여 워드클라우드를 원하는 이미지 형태로 출력 해 봅시다.
# https://www.adobe.com/kr/express/feature/image/png
# 원하는 이미지를 검은색 색상으로 그린다음 배경은 투명으로 만들어요
import PIL
# icon = PIL.Image.open("../Data/cloud.png")
icon = PIL.Image.open("../Data/heart.png")

import numpy as np
img = PIL.Image.new("RGB", icon.size, (255,255,255))
img.paste(icon, icon)
img = np.array(img)
# print(img)
# print(img.shape)

# wc = WordCloud(
#     random_state=1234,
#     font_path=font,
#     width=400,
#     height=400,
#     background_color='white',
#     mask=img
# )
#
# img_wordcloud = wc.generate_from_frequencies(dic_word)
#
# plt.figure(figsize=(10,20))
# plt.axis('off')
# plt.imshow(img_wordcloud)
# plt.show()

#워드클라우드 색상 변경하기
#https://matplotlib.org/stable/tutorials/colors/colormaps.html
#컬러맵에서 사용할 수 있는 색상표를 확인합니다.

wc  = WordCloud(
    random_state=1234,
    font_path=font,
    width=400,
    height=400,
    background_color='white',
    mask=img,
    colormap='winter'
)

img_wordcloud = wc.generate_from_frequencies(dic_word)

plt.figure(figsize=(10,10))
plt.axis('off')
plt.imshow(img_wordcloud)
plt.show()







