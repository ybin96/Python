# -*- coding: utf-8 -*-
"""day0116_welfare.ipynb의 사본의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aMYeGJfkJnFiKiyUihdfa8JdT7rhdwCg
"""

import pandas as pd
import numpy as np
import seaborn as sns

from google.colab import drive

drive.mount("/content/gdrive")

pip install pyreadstat

raw_welfare = pd.read_spss("/content/gdrive/My Drive/Colab Notebooks/Koweps_hpwc14_2019_beta2.sav")

raw_welfare

welfare = raw_welfare.copy()

welfare = welfare.rename(columns={
    'h14_g3':'sex',
    'h14_g4':'birth',
    'h14_g10':'marrige_type',
    'h14_g11':'religion',
    'p1402_8aq1':'income',
    'h14_eco9':'code_job',
    'h14_reg7':'code_region'
})

my_col = ['sex','birth','marrige_type','religion','income','code_job','code_region']
welfare[my_col]

welfare[['sex','birth','marrige_type','religion','income','code_job','code_region']]

welfare['sex']

#성별은 어떤 자료형인지 확인 해 봅시다

welfare['sex'].dtypes

#성별에 들어 있는 값의 종류별로 빈도수를 확인

welfare['sex'].value_counts()

#데이터 전처리 : 분석하고자 하는 변수(속성)들에 대하여 이상치가 있는 지 결측치가 있는지 확인하고 
#                   처리 한 후 또 변수들의 값은 분석이 용이한 형태로 바꾸는 모든 작업들을 말합니다.

#성별의 값이 1, 2로 되어 있는데 male, female로 변경 해 봅니다.

welfare['sex'] = np.where(welfare['sex'] == 1, 'male', 'female')

welfare[my_col]

welfare['sex'].value_counts()

#성별에 대하여 빈도 막대그래프 그리기

sns.countplot(data=welfare, x='sex')

#월급에 대한 자료형 확인하기

welfare['income'].dtypes

#성별은 'male', 'female' 둘 중에 하나에 해당하는 "범주형" 이기 때문에 
#value_counts()로 변수를 확인하기에 적합해요

#그러나 월급은 몇가지로 정해진게 아니라
#월급의 값이 연속되어진 범위입니다.   
#예를 들어 월급의 최소값이 5000000원이고
#최대값이 15000000원이라고 할 때에 월급의 범위는 500000, 510000 ~~~~~ 15000000으로 연속되어 있는 범위 입니다.
#이경우 만약 value_counts()를 사용하게 되면 별로 바람직 하지 않아요
#이렇게 연속형 변수인 경우에는 요약통계량을 확인함으로 써 변수를 확인합니다.

welfare['income'].describe()

#연속형의 변수인 경우 히스토그램을 그려서 어느 범위에 값이 치중되어 있는지 확인 할 수 있어요

sns.histplot(data=welfare, x='income')

#이상치 확인하기

sns.boxplot(data=welfare, y='income')

# 결측치 확인

welfare['income'].isna()

welfare['income'].isna().sum()

#성별에 따른 월급의 차이를 분석하기 위하여 
#월급에 na가 있는 자료를 제거 후 분석합니다.

sex_income = welfare.dropna(subset=['income'])\
              .groupby('sex', as_index=False)\
              .agg(mean_income=('income','mean'))

sex_income

#위에 만든 성별별로 월급의 평균 요약표를 막대그래프로 그려요

sns.barplot(data=sex_income, x='sex',y='mean_income')

sns.barplot(data=sex_income, y='sex',x='mean_income')

# 몇살때에 월급을 가장 많이 받는지 알아 봅시다.

#분석에 필요한 변수는 나이,월급입니다.
#그런데 나이라는 변수는 없어요.
#그대신 birth라는 변수가 있어요.
#이 변수를 통해서 "나이"라는 파생변수를 만들수 있어요

welfare['birth'].dtype

welfare['birth'].head()

welfare['birth'].describe()

sns.histplot(data=welfare, x='birth')

#결측치 확인하기

welfare['birth'].isna().sum()

#출생년도(birth)를 통해 "나이"변수를 만들어요

welfare['age'] =  2019 - welfare['birth'] +1

welfare['age'].describe()

sns.histplot(data=welfare, x='age')

# 나이의 변화에 따른 월급의 차이를 그래프로 그려 봅시다

# 나이에 따른 월급의 평균을 요약표로 만들어요

age_income = welfare.dropna(subset=['income'])\
              .groupby('age', as_index=False)\
              .agg(mean_income=('income','mean'))

sns.lineplot(data=age_income, x='age',y='mean_income')

age_income

#나이를 연령대로 나누어 봅시다.
#30이하 초년
#30~59  중년
#60~    노년

welfare['ageg'] = np.where(welfare['age'] < 30, 'young', 
                           np.where(welfare['age'] < 60, 'middle', 'old'))

#연령대별 빈도수 확인

welfare['ageg'].value_counts()

#빈도 막대그래프 그리기

sns.countplot(data=welfare,x='ageg')

#연령대 별로 월급의 차이를 막대그래프로 나타내고 싶어요

#연령대별로 급여의 평균을 요약표로 만들어요

ageg_income = welfare.dropna(subset=['income'])\
                .groupby('ageg', as_index=False)\
                .agg(mean_income=('income','mean'))

ageg_income

sns.barplot(data=ageg_income, x='ageg', y='mean_income')

# 막대그래프의 순서 정하기

sns.barplot(data=ageg_income, x='ageg', y='mean_income', order=['young','middle','old'])

#연령대별, 성별별로 급여의 차이를 알아 봅시다

#연령대별, 성별별 급여의 평균 요약표

ageg_sex_income = welfare.dropna(subset=['income','ageg','sex'])\
                    .groupby(['ageg','sex'], as_index=False)\
                    .agg(mean_income=('income','mean'))

ageg_sex_income

sns.barplot(data=ageg_sex_income,x='ageg',y='mean_income',hue='sex', order=['young', 'middle', 'old'])

# 나이별로 성별별로 급여의 차이를 확인

age_sex_income = welfare.dropna(subset=['age','sex','income'])\
                    .groupby(['age','sex'], as_index=False)\
                    .agg(mean_income = ('income','mean'))

sns.lineplot(data=age_sex_income, x='age', y='mean_income', hue='sex')

age_sex_income

#직업별 월급의 차이를 알아 봅시다.

welfare['code_job']

welfare['code_job'].dtype

welfare['code_job'].value_counts()

#직업에 대한 정보가 611, 941 처럼 코드로 되어 있어요.
#이 상태는 어떤 직업인지 알기 어려우니 제공하는 코드북을 이용하여 
#직업명 변수를 추가하도록 합시다.

df_job = pd.read_excel("/content/gdrive/My Drive/Colab Notebooks/Koweps_Codebook_2019.xlsx", sheet_name='직종코드')

df_job

welfare[my_col]

# welfare와 df_job을 가로로 합쳐 봅시다.    merge

welfare2 = pd.merge(welfare, df_job, how='left')

my_col = ['sex','birth','marrige_type','religion','income','code_job','code_region', 'job']

welfare2[my_col]

#job도 na가 아니고, income도 na가 아닌 데이터에 대하여 
#job별로 급여의 평균을 요약표를 만들어 봅니다.

job_income_top10 = welfare2.dropna(subset=['job','income'])\
                .groupby('job', as_index=False)\
                .agg(mean_income=('income','mean'))\
                .sort_values(by='mean_income', ascending=False)\
                .head(10)

job_income_top10

import matplotlib.pyplot as plt

# plt.rcParams.update({'font.family':'Malgun Gothic'})

# 한글설정
# !sudo apt-get install -y fonts-nanum
# !sudo fc-cache -fv
# !rm ~/.cache/matplotlib -rf

plt.rc('font', family='NanumBarunGothic')

sns.barplot(data=job_income_top10, x='mean_income', y='job')

# 급여가 낮은 20개의 직업을 출력

job_income_bottom10 = welfare2.dropna(subset=['income','job'])\
    .groupby('job', as_index=False)\
    .agg(mean_income = ('income','mean'))\
    .sort_values(by='mean_income')\
    .head(10)

job_income_bottom10

sns.barplot(data=job_income_bottom10, x='mean_income', y='job')\
.set(xlim=[0,800])

sns.barplot(data=job_income_top10, x='mean_income', y='job')

# 남자들의 직업별 빈도수 상위 10개 추출

job_male_top10 = welfare2.dropna(subset=['job', 'sex'])\
                    .query('sex == "male"')\
                    .groupby('job', as_index=False)\
                    .agg(n=('job','count'))\
                    .sort_values(by="n", ascending=False)\
                    .head(10)

job_male_top10

#여자들의 직업별 빈도수 상위 10개 추출

job_female_top10 = welfare2.dropna(subset=['sex','job'])\
                    .query('sex == "female"')\
                    .groupby("job", as_index=False)\
                    .agg(n=("job","count"))\
                    .sort_values(by="n",ascending=False)\
                    .head(10)

job_female_top10

#남자들의 직업별 빈도를 막대그래프로 그려 봅니다.

sns.barplot(data=job_male_top10, x='n', y='job').set(xlim=[0,500])

#여자들의 직업별 빈도수 상위 10개를 막대그래프로 표현

sns.barplot(data=job_female_top10, x='n', y='job').set(xlim=[0,500])

#종교가 있으면 사람들이 이혼을 덜 할까?

welfare2['religion'].dtypes

#종교 변수의 값의 종류별 빈도수 확인

welfare2['religion'].value_counts()

#1: 종교있음
#2: 종교없음
#yes, no로 값을 변경 해 봅시다

welfare2['religion'] =  np.where(welfare2['religion'] == 1,'yes','no')

welfare2[my_col]

#종교의 빈도를 막대그래프로 그려 봅시다.

sns.countplot(data=welfare2, x='religion')

#혼인상태 변수 확이하기

my_col = ['sex',
 'birth',
 'marrige_type',
 'religion',
 'income',
 'code_job',
 'code_region',
 'job',
 'marriage']

welfare2['marrige_type'].dtype

welfare2['marrige_type'].value_counts()

# marrige_type에 따라 이혼여부 파생변수를 만들어요

welfare2['marriage'] = np.where(welfare2['marrige_type']==1, 'marriage', 
                      np.where(welfare2['marrige_type']==3, 'divorce','etc'))

welfare2[my_col]

#혼인상태의 빈도수를 확인

count_marriage = welfare2.dropna(subset=['marriage'])\
                    .groupby('marriage', as_index=False)\
                    .agg(n=('marriage','count'))

count_marriage

sns.barplot(data=count_marriage, x='marriage', y='n')

#혼인상태의 etc를 제외하고 
#종교에 따른 혼인상태의 빈도수의 요약표를 만들어 봅시다.

religion_marriage = welfare2.query('marriage != "etc"')\
                        .groupby(['religion', 'marriage'], as_index=False)\
                        .agg(n=('marriage', 'count'))

religion_marriage

type(welfare2['marriage'])

welfare2['marriage'].value_counts(normalize=True)

type(welfare2.query('marriage != "etc"') \
                 .groupby('religion') \
                 ['marriage'])

rm = welfare2.query('marriage == "divorce"')['religion']

df = rm.value_counts(normalize=True)

type(df)

df

df= pd.DataFrame(df)

df

df.reset_index(inplace=True)      #inplace=True 변경된 내용을 적용

df

df.rename(columns={'index':'종교','religion':'비율'}, inplace=True)

df

sns.barplot(data=df, x='종교',y='비율')

my_col

welfare2['code_region']

welfare2['code_region'].value_counts()

df_region = pd.DataFrame({
    'code_region':[1,2,3,4,5,6,7],
    'region':['서울','수도권(인천/경기)','부산/경남/울산','대구/경북','대전/충남','강원/충북','광주/전남/전북/제주도']
})

df_region

welfare2= welfare2.merge(df_region, how='left')

my_col.append('region')

my_col

welfare2[my_col]

#지역별, 연령대별 분석하기

#지역별, 연령대별 사람수 표를 만들어 봅시다.

region_ageg_count = welfare2.dropna(subset=['ageg','region'])\
                        .groupby(['region','ageg'], as_index=False)\
                        .agg(n=('ageg','count'))

#지역별, 연령대별 사람의 수를 막대그래프로 나타내 봅시다.
sns.barplot(data=region_ageg_count, x='n', y='region', hue='ageg')

region_ageg_count

pivot_df = region_ageg_count.pivot(index='region', columns='ageg', values='n')

pivot_df

pivot_df.plot.barh(stacked=True)

reorder_df = pivot_df.sort_values('old')[['young','middle','old']]

reorder_df.plot.barh(stacked=True)

